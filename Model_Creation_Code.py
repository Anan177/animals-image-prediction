# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mbh_IjutitiBLYRo0cdHCaGTe56jo8Xu

# Proyek Akhir : Image Classification Model Deployment
- Nama: Ananta Alfallah Tarigan
- Email: anantar437471@gmail.com
- Id Dicoding: ananta_alfallah
- Dataset: https://drive.google.com/drive/folders/1bKziYepORzCC6v42z-UiiIdPlw3ZlS80?usp=sharing (memiliki resolusi gambar tidak seragam)
"""

from google.colab import drive
import tensorflow as tf
!pip install split-folders
import zipfile, splitfolders, os, random, shutil
from PIL import Image

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Input
import pathlib
import numpy as np
import matplotlib.pyplot as plt

drive.mount('/content/drive')

local_zip = '/content/drive/MyDrive/Project3/data_fix.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')

zip_ref.extractall('/content/drive/MyDrive/Project3/')

zip_ref.close()

base_dir = '/content/drive/MyDrive/Project3/data_fix'
os.listdir('/content/drive/MyDrive/Project3/data_fix')

"""Melakukan undersampling agar sample di tiap kelas berjumlah sama

"""

base_dir = '/content/drive/MyDrive/Project3/data_fix'
undersampled_dir = os.path.join(base_dir, 'undersampled')
os.makedirs(undersampled_dir, exist_ok=True)

undersample_folders = ['dog', 'spider', 'chicken', 'horse']
min_count = len(os.listdir('/content/drive/MyDrive/Project3/data_fix/horse'))

for folder in undersample_folders:
    folder_path = os.path.join(base_dir, folder)
    files = os.listdir(folder_path)
    files_to_keep = random.sample(files, min_count)
    target_dir = os.path.join(undersampled_dir, folder)
    os.makedirs(target_dir, exist_ok=True)
    for file in files_to_keep:
        source_file = os.path.join(folder_path, file)
        target_file = os.path.join(target_dir, file)
        shutil.copyfile(source_file, target_file)

print(os.listdir(undersampled_dir))

print('chicken samples count:', len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/chicken')))
print('dog samples count:', len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/dog')))
print('horse samples count:', len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/horse')))
print('spider samples count:', len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/spider')))
print('total sample dalam dataset:', (len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/chicken'))+len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/dog'))+len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/horse'))+len(os.listdir('/content/drive/MyDrive/Project3/data_fix/undersampled/spider'))))

"""Melakukan library splitfolders untuk memisahkan train set dan validation set, dengan ratio (80% dan 20%)"""

splitfolders.ratio('/content/drive/MyDrive/Project3/data_fix/undersampled', output="output", seed=1337, ratio=(0.8, 0.2))

os.listdir('output')

os.listdir('output/train')

os.listdir('output/val')

train_dir = 'output/train'
val_dir = 'output/val'

train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')
validation_datagen = ImageDataGenerator(
                    rescale=1./255)

train_generator = train_datagen.flow_from_directory(train_dir,
                                                    class_mode='categorical',
                                                    target_size=(150, 150))

validation_generator = validation_datagen.flow_from_directory(val_dir,
                                                        class_mode='categorical',
                                                        target_size=(150, 150))

model = tf.keras.models.Sequential([
    MobileNetV2(weights="imagenet", include_top=False, input_tensor=Input(shape=(150, 150, 3))),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(4, activation='softmax')
])
model.layers[0].trainable = False

early_stopping = EarlyStopping(monitor='val_loss', patience=4, restore_best_weights=True)

model.compile(optimizer=tf.optimizers.Adam(lr=0.0001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_generator,
              epochs=100,
              validation_data=validation_generator, callbacks = [early_stopping])

"""Akurasi pada training set dan validation set >92%"""

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Plot Akurasi')
plt.ylabel('Akurasi')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Plot loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

"""Menulis kode untuk menyimpan model ke dalam format TF-Lite"""

export_dir = '/content/drive/MyDrive/Project3/saved_model/'
tf.saved_model.save(model, export_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('/content/drive/MyDrive/Project3/animals.tflite')
tflite_model_file.write_bytes(tflite_model)
